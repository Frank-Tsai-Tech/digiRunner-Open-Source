buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.5.0.2730"
	}
}

plugins {
	id 'org.springframework.boot' version '3.4.5'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'com.github.jk1.dependency-license-report' version '2.9'

	id "org.sonarqube" version "5.1.0.4882"

	id "jacoco"
	id 'java'
}

jar {
	enabled false
}

import com.github.jk1.license.render.*
licenseReport {
	renderers = [new InventoryHtmlReportRenderer()]
	outputDir = "$projectDir/build/licenses"
	allowedLicensesFile = project.layout.projectDirectory.file("${rootDir}/.tmp/allowed-licenses.json").asFile
}



allprojects {
	group = 'tpi.dgrv4'
	version = 'release-rc-v4.5.4.1'
	apply plugin:  'io.spring.dependency-management'

	repositories {
		mavenCentral()
	}

	// 指定編碼 UTF-8
	tasks.withType(JavaCompile) {
		options.encoding = "UTF-8"
	}
	tasks.withType(Test) {
		systemProperty "file.encoding", "UTF-8"
	}
}

subprojects {
	apply plugin:  'org.springframework.boot'
	apply plugin:  'java'
	apply plugin:  'java-library'
	apply plugin:  'eclipse'

	sourceCompatibility = '21'
	targetCompatibility = '21'


	dependencies {
		implementation files("${rootDir}/libsext/dgrv4_CodecUtil-v4.5.4.1-lib.jar")
		implementation files("${rootDir}/libsext/dgrv4_HttpUtil-v4.5.4.1-lib.jar")

		implementation ('org.springframework.boot:spring-boot-starter-data-jpa'){
			exclude group: 'ch.qos.logback', module: 'logback-classic'
			exclude group: 'ch.qos.logback', module: 'logback-core'
		}
		implementation ('org.springframework.boot:spring-boot-starter-web'){
			exclude group:'org.springframework.boot', module:'spring-boot-starter-tomcat'
			exclude group:'org.apache.tomcat.embed', module:'tomcat-embed-core'
		}
		// 修正上方排除的 org.apache.tomcat.embed:tomcat-embed-core
		implementation 'org.apache.tomcat.embed:tomcat-embed-core:10.1.35'
		// 修正上方排除的 ch.qos.logback:logback-classic
		implementation 'ch.qos.logback:logback-classic:1.5.13'
		// 修正上方排除的 ch.qos.logback:logback-core
		implementation 'ch.qos.logback:logback-core:1.5.13'

		// 添加 Undertow (乾淨的 undertow) , 預計升級 springboot v3.4.0
    	implementation ('org.springframework.boot:spring-boot-starter-undertow'){}

		implementation 'org.jboss.xnio:xnio-nio:3.8.16.Final'
		implementation 'jakarta.servlet:jakarta.servlet-api:6.1.0'

		compileOnly 'com.h2database:h2'
		compileOnly 'org.projectlombok:lombok:1.18.32'
		annotationProcessor 'org.projectlombok:lombok:1.18.32'
		implementation 'commons-io:commons-io:2.16.1'
		implementation 'org.bouncycastle:bc-fips:2.0.0'
	}

	// clear lib
	task myClearLib(type: Delete) {
		delete "$buildDir/libs/lib"
		delete "$buildDir/libs/libsext"
	}

	// copy lib
	task myCopyLib(dependsOn:resolveMainClassName, type: Copy) {
		//task myCopyLib(type: Copy) {
		from(configurations.runtimeClasspath){
			include '**/*.jar'
			exclude '**/dgrv4*.jar'
			exclude '**/aws-java-sdk*.jar'
			exclude '**/h2-*.jar'
			exclude '**/mariadb-java-client-*.jar'
			exclude '**/mssql-jdbc-*.jar'
			exclude '**/ojdbc11-*.jar'
			exclude '**/postgresql-*.jar'
			into 'libs/lib'
		}
		from(configurations.runtimeClasspath){
			include '**/dgrv4*.jar'
			into 'libs/libsext'
		}
		from(configurations.runtimeClasspath){
			include '**/google-cloud-logging-logback*.jar'
			include '**/bcprov-jdk18on*.jar'
			include '**/aws-java-sdk*.jar'
			include '**/h2-*.jar'
			include '**/mariadb-java-client-*.jar'
			include '**/mssql-jdbc-*.jar'
			include '**/ojdbc11-*.jar'
			include '**/postgresql-*.jar'
			into 'libs/libsext/party-3rd-jar'
		}
		into "$buildDir"
	}
}

static def getDate() {
	return new Date().format('yyyyMMdd_HHmm')
}

// Gateway jar runnable
project(':dgrv4_Gateway_serv'){

	// 引用其它 project
	dependencies{

		implementation project(':dgrv4_Common_lib')
		implementation project(':dgrv4_KeeperServer_lib')
		implementation project(':dgrv4_Entity_lib')
		
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

		// jasypt
		implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'

		//implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.5.12'

		// https://mvnrepository.com/artifact/com.nimbusds/nimbus-jose-jwt
		implementation 'com.nimbusds:nimbus-jose-jwt:9.40'

		// https://mvnrepository.com/artifact/commons-lang/commons-lang
		implementation group: 'commons-lang', name: 'commons-lang', version: '2.6'

		// https://mvnrepository.com/artifact/org.codehaus.janino/janino
		implementation 'org.codehaus.janino:janino:3.0.7'

		implementation 'org.apache.httpcomponents:httpclient:4.5.14'
		implementation 'org.apache.httpcomponents:httpmime:4.5.14'

		implementation 'javax.activation:javax.activation-api:1.2.0'

		// for tsmpdpaa
		implementation 'com.sun.mail:javax.mail:1.6.2'
		implementation 'org.springdoc:springdoc-openapi-ui:1.6.14'
		implementation 'org.yaml:snakeyaml:2.2'

		implementation ('org.apache.poi:poi-ooxml:5.4.0'){
			// 'Avoid CVE-2024-26308'
			// exclude group: 'org.apache.commons', module: 'commons-compress'
		}
		// implementation 'org.apache.commons:commons-compress:1.27.0'

		// Kryo Serialization
		implementation 'com.esotericsoftware:kryo:5.4.0'

		// websocket
		implementation 'org.springframework.boot:spring-boot-starter-websocket'
		implementation 'io.undertow:undertow-core:2.3.17.Final'
		implementation 'io.undertow:undertow-websockets-jsr:2.3.17.Final'

		implementation 'com.github.oshi:oshi-core:6.4.5'
		implementation 'net.java.dev.jna:jna:5.13.0'


		//  compileOnly:  JDBC Driver 5 種
		implementation 'com.h2database:h2'
		implementation project(':dgrv4_H2Config_lib')
		implementation 'com.microsoft.sqlserver:mssql-jdbc'
		implementation 'com.oracle.database.jdbc:ojdbc11'
		implementation 'org.postgresql:postgresql'
		implementation('org.mariadb.jdbc:mariadb-java-client:3.1.2', {
			exclude group: 'net.java.dev.jna', module: 'jna-platform'  //使用其它版本的相依
			exclude group: 'com.google.protobuf', module: 'protobuf-java'
		})
		
		// 修正上方排除的
		compileOnly 'com.google.protobuf:protobuf-java:3.25.5'
		
		 implementation 'org.owasp.esapi:esapi:2.6.0.0'

	}

	task createVersionTxt() {
		doFirst {
			file("src/main/resources/open-source-version.txt").text = version
		}
	}

	build {
		dependsOn bootJar
	}

	bootRun {
		dependsOn createVersionTxt
	}

	bootJar {
		dependsOn createVersionTxt

		archivesBaseName = "digiRunner"

		dependsOn myClearLib
		dependsOn (myCopyLib)
	}

	jar {
		//不產生JAR檔
		enabled false
	}

	task executeGitDescribe(type: Exec) {
		commandLine 'git', 'describe', '--tags'
		workingDir project.projectDir
		//workingDir projectDir
		standardOutput = new ByteArrayOutputStream()
		doLast {
			println "Git describe result: ${standardOutput.toString().trim()}"
		}
	}
}

project(':dgrv4_Common_lib'){
	// 引用其它 project
	dependencies{
		// Kryo Serialization
		implementation 'com.esotericsoftware:kryo:5.4.0'

		// 因為 org.mariadb.jdbc:mariadb-java-client:3.1.2 子相依使用了 jna 5.x 的版本, 與程式不相
		implementation 'com.github.oshi:oshi-core:6.4.5'
		implementation 'net.java.dev.jna:jna:5.13.0'
	}

	bootJar {
		//不產生JAR檔
		enabled false
	}

	jar {
		exclude "**/*.properties"
		exclude "**/*.sql"
		exclude "**/*.jar"
		exclude "**/*.xml"

		archiveClassifier = 'lib' // 去除 postfix = plain 字樣
		archivesBaseName = "dgrv4-common"
		if (project.hasProperty("version")) {
			archiveVersion = version + '-' + getDate() //換版時修改
		}
		dependsOn myClearLib
	}
}

project(':dgrv4_Entity_lib'){

	// 引用其它 project
	dependencies{
		implementation project(':dgrv4_Common_lib')
		compileOnly 'org.apache.commons:commons-lang3:3.12.0'
		
		// Kryo Serialization
		compileOnly 'com.esotericsoftware:kryo:5.4.0'
	}

	bootJar {
		//不產生JAR檔
		enabled false
	}

	jar {
		exclude "**/*.properties"
		exclude "**/*.sql"
		exclude "**/*.jar"
		exclude "**/*.xml"

		archiveClassifier = 'lib' // 去除 postfix = plain 字樣
		archivesBaseName = "dgrv4_Entity"
		if (project.hasProperty("version")) {
			archiveVersion = version + '-' + getDate() //換版時修改
		}
		dependsOn myClearLib
	}
}

project(':dgrv4_H2Config_lib'){

	// 引用其它 project
	dependencies{
		implementation project(':dgrv4_Common_lib')
	}

	bootJar {
		//不產生JAR檔
		enabled false
	}

	jar {
		exclude "**/*.properties"
		exclude "**/*.sql"
		exclude "**/*.jar"
		exclude "**/*.xml"

		archiveClassifier = 'lib' // 去除 postfix = plain 字樣
		archivesBaseName = "dgrv4_H2Config"  // ** Copy 使用後記得改名字 **
		if (project.hasProperty("version")) {
			archiveVersion = version + '-' + getDate() //換版時修改
		}
		dependsOn myClearLib
	}
}

project(':dgrv4_KeeperServer_lib'){

	// 引用其它 project 
	dependencies{
		compileOnly group: 'commons-lang', name: 'commons-lang', version: '2.6'

		// Kryo Serialization
		implementation 'com.esotericsoftware:kryo:5.4.0'
	}

	bootJar {
		//不產生JAR檔
		enabled false
	}

	jar {
		exclude "**/*.properties"
		exclude "**/*.sql"
		exclude "**/*.jar"
		exclude "**/*.xml"

		archiveClassifier = 'lib' // 去除 postfix = plain 字樣
		archivesBaseName = "dgrv4_KeeperServer"
		if (project.hasProperty("version")) {
			archiveVersion = version + '-' + getDate() //換版時修改
		}
		dependsOn myClearLib
	}
}


gradle.taskGraph.whenReady {taskGraph ->
	if (project.hasProperty('excludeProject')) {
		println "Excluding $excludeProject"
		taskGraph.getAllTasks().each { task ->
			if (task.getPath().contains(excludeProject)) {
				task.enabled = false
			}
		}
	}
}

def env = System.getProperty("env") ?: "eclipse"  // eclipse or win10cmd
// print message

task print0 { project.logger.lifecycle("...........................................") }
task print1 { project.logger.lifecycle("...........builed env : OpenDGR............") }
task print2 { project.logger.lifecycle("...........................................") }
